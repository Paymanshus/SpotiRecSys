# -*- coding: utf-8 -*-
"""SpotiRecSys.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZTp_vdeOStLHfdZijJz2dljNsAE5K7ny
"""

import pandas as pd
import numpy as np
import spotipy as spotipy
from matplotlib import pyplot as plt
import spotipy
# import spotipy.util
from spotipy.oauth2 import SpotifyClientCredentials, SpotifyOAuth
import requests
import json
import sys
import webbrowser
import base64
import pprint
import os
from os import path
import time


client_id = "7d7875d6e08249ed8a047da889fac81f"
client_secret = "2f7cd0462cdb45a881a8bea4fd0504d8"
redirect_uri = "http://127.0.0.1:9090"

os.environ['SPOTIPY_CLIENT_ID'] = client_id
os.environ['SPOTIPY_CLIENT_SECRET'] = client_secret
os.environ['SPOTIPY_REDIRECT_URI'] = redirect_uri

"""#Using the Spotify Web API

App auth without user auth, user auth later. <br>1. Accessing the Spotify database to create our own subset database for use
"""
auth_manager = SpotifyClientCredentials(client_id=client_id, client_secret=client_secret)
sp = spotipy.Spotify(client_credentials_manager=auth_manager)
scope = "user-library-read user-top-read playlist-read-private playlist-read-collaborative"
sp = spotipy.Spotify(client_credentials_manager=SpotifyOAuth(scope=scope, show_dialog=True))

# results = sp.current_user_saved_tracks(limit=50)
# # pprint.pprint(results)
# for idx, item in enumerate(results['items']):
#     continue
#     # track = item['track']
# print(idx, track['artists'][0]['name'], " - " , track['name'])

# results = sp.current_user_top_tracks(limit=50)
# for idx, item in enumerate(results['items']):
#     print(idx, item['artists'][0]['name'], ' - ', item['name'])


# #Top songs
def top_songs():
    top_songs = []
    for off in range(0,1000,50):
        results = sp.current_user_top_tracks(limit = 50)
        for item in results['items']:
            top_songs.append([item['artists'][0]['name'], item['name']])

        top_songs = pd.DataFrame(data=top_songs, columns=['Artist', 'Title'])
        print(top_songs)

# -------------------------------------------------------------------------------------------
# #Saved tracks
def get_saved_tracks():
    saved_tracks = []
    for off in range(0, 15000, 50):
        results = sp.current_user_saved_tracks(limit=50, offset=off)
        for item in results['items']:
            track = item['track']
            # print(track['id'])
            saved_tracks.append([track['artists'][0]['name'], track['name'], track['id']])

    saved_tracks = pd.DataFrame(data=saved_tracks, columns=['Artist', 'Title', 'id'])
    print(saved_tracks)
    saved_tracks.to_csv(f'User_10k_songs.csv')

# print(sp.audio_features(saved_tracks['id'][0]))

user = pd.read_csv("User_10k_songs.csv")
user = user.iloc[:, 1:]
keys = []
for key in sp.audio_features(user['id'][0])[0].keys():
    keys.append(key)
keys_dict = {key: [] for key in keys}

def get_library_audio_feature():
    for i in range(len(user['id'])):
        for i in range(2084, len(user['id'])):
            start_time = time.time()
            for i in range(4000, 6000):
                print('Song Number:', i)
                song_features = []
                song_features.append(sp.audio_features(user['id'][i])[0])
                for idx, key in enumerate(keys_dict):
                    keys_dict[key].append(song_features[0][key])
                    print('INDEX:', idx)
    print(keys_dict)
    print("Time taken: ", time.time() - start_time)
    keys_df = pd.DataFrame.from_dict(keys_dict)
    keys_df.to_csv(f'4_6kfeatures.csv')

#Merging
def merge_dfs(user_features,user):
    user_features = pd.read_csv('library_features.csv')
    features_with_name = pd.merge(user_features, user, how="inner", on='id')


# GETTING PLAYLIST IDS FOR CURRENT USER
def get_user_playlists():
    i = 0
    for off in range(0, 500, 50):
        playlist_ids = sp.current_user_playlists(limit=50, offset=off)
        print(off)
        # pprint.pprint(playlist_ids['items'])
        for playlist in playlist_ids['items']:
            print(i, playlist['id'], playlist['name'])
            i = i+1

def search_playlist(playlist_name):
    playlist_name.replace(' ', '+')
    playlist = sp.search(q=playlist_name, type='playlist')
    playlist_id = playlist['playlists']['items'][0]['id']
    return playlist_id



# GETTING LIST OF SONGS AND DETAILS FOR A PARTICULAR PLAYLIST ID
# Playlist from API to dict to df to csv(name as name of playlist.csv)
def list_playlist(playlist_id):

    # print(sp.playlist_items(playlist_id, fields='name')) # Print playlist name
    playlist_total = sp.playlist_items(playlist_id, fields='total') # Get total no of songs in playlist
    playlist_songs = []
    track_no = 0
    # Get list of songs in playlist
    for off in range(0, playlist_total['total'], 50):
        results = sp.playlist_items(playlist_id, limit=50, offset=off)
        for item in results['items']:
            track = item['track']
            # print(track_no, track['name'])
            track_no = track_no + 1
            # pprint.pprint(track)
            playlist_songs.append([track['artists'][0]['name'], track['name'], track['id']])

    playlist_songs_df = pd.DataFrame(data=playlist_songs, columns=['Artist', 'Title', 'id'])
    print(playlist_songs_df)
    return playlist_songs_df, playlist_total

# Songs from playlist to API to check for audio_features then sent back as dict convert to df to csv
def get_playlist_feature(playlist_songs_df):
    playlist_features = keys_dict

    for song_no in range(0, playlist_total):

        print('Song Number:', song_no)
        song_features = sp.audio_features(playlist_songs_df['id'][song_no])

        for idx, p_key in enumerate(playlist_features):
            keys_dict[p_key].append(song_features[0][p_key])
            print('INDEX:', idx)

    # print(playlist_features)
    playlist_features_df = pd.DataFrame.from_dict(playlist_features)

    return playlist_features_df

def get_playlist_features(playlist_songs_df):
    playlist_features = keys_dict

    for song_no_max in range(0, playlist_total, 100):

        print('Song Number Max: ', song_no_max)
        song_features = sp.audio_features(tracks=[playlist_songs_df['id'][i] for i in range(song_no_max)])
        print(len(song_features))




'''
1. Take playlist name
2. Get list of songs in playlist (dict to df to csv)
3. Get audio features for songs in playlist (dict to df to csv)
4. Get 

Get csvs for analysis of playlist


Extra: 
Do analysis of library dataset
Run Clustering on library dataset
Do analysis of 160k dataset
'''

if __name__ == '__main__':

    playlist_name = "heypi"

    playlist_id = search_playlist(playlist_name)
    # SongList check
    if os.path.exists(f'{playlist_name}_SongList.csv'):
        print('Playlist songs found in dir')
        playlist_songs_df = pd.read_csv(f'{playlist_name}_SongList.csv')
        playlist_total = playlist_songs_df.shape[0]
    else:
        print('Playlist songs not found, creating new csv')
        playlist_songs_df, playlist_total = list_playlist(playlist_id)
        playlist_songs_df.to_csv(f'{playlist_name}_SongList.csv')

    print(playlist_total)
    input('')

    # FeatureList Check
    if os.path.exists(f'{playlist_name}_FeatureList.csv'):
        print('Playlist features found in dir')
        playlist_features_df = pd.read_csv(f'{playlist_name}_FeatureList.csv')

    else:
        print('Playlist features not found, creating new csv')
        start_time = time.time()
        # playlist_features_df = get_playlist_feature(playlist_songs_df)
        get_playlist_features(playlist_songs_df)
        # playlist_features_df.to_csv(f'{playlist_name}_FeatureList.csv')
        print(time.time() - start_time)
